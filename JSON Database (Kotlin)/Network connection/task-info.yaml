type: edu
files:
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTest(order = 1)
        CheckResult test() {

            TestedProgram server = new TestedProgram("jsondatabase.server");
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("jsondatabase.client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/jsondatabase/server/Main.kt
  visible: true
  text: |-
    package jsondatabase.server

    import kotlin.system.exitProcess

    fun main() {
        val ui = Ui()
        ui.ProcessInput()

    }
    class Ui{
        val database = mutableMapOf<Int, String>()
        fun ProcessInput(){
            var input=""
            do{
                input = readln()
                if(input.startsWith("set")){
                    val cp = input.split(" ")
                    set(cp[1].toInt(),input.substring(cp.indexOf(cp[2])))
                }
                else if(input.startsWith("get")){
                    val cp = input.split(" ")
                    get(cp[1].toInt())
                }
                else if(input.startsWith("delete")){
                    val cp = input.split(" ")
                    delete(cp[1].toInt())
                }
            }while(input!="exit")
        }
        fun set(index:Int, str:String){
            if(index>100||index<0) {
                println("Error")
                return
            }
            database[index]=str
            println("OK")
        }
        fun get(index:Int){
            if (database.containsKey(index))
                if(database[index]!="")
                    println(database[index])
                else
                    println("ERROR")
            else
                println("ERROR")
        }
        fun delete(index:Int){
            if(index>100||index<0) {
                println("ERROR")
                return
            }
            if (database.containsKey(index))
                database[index]=""
            println("OK")
        }
    }
  learner_created: true
- name: src/jsondatabase/client/Main.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/26260#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 16 Apr 2023 22:06:50 UTC"
record: 2
