type: edu
files:
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("jsondatabase.client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("jsondatabase.server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/jsondatabase/server/Main.kt
  visible: true
  text: |-
    package jsondatabase.server

    import java.io.DataInputStream
    import java.io.DataOutputStream
    import java.io.OutputStream
    import java.net.InetAddress
    import java.net.ServerSocket
    import java.nio.charset.Charset
    import kotlin.system.exitProcess

    fun main() {
        val controller = Controller()
        controller.ProcessMainInput()

    }
    class Controller{
        init{
            println("Server started!")
        }
        val address = "127.0.0.1"
        val port = 23456
        var server = ServerSocket(port, 50, InetAddress.getByName(address))
        val socket = server.accept()
        val input = DataInputStream(socket.getInputStream())
        val output = DataOutputStream(socket.getOutputStream())
        var ui = ServerUi(this, output)
        fun ProcessMainInput() {
            val messageFromClient = input.readLine()
            ui.received(messageFromClient)
            ui.sent("A record # 12 was sent!")
        }
    }
    class ServerUi(val controller: Controller, val output: OutputStream){
        val receivedMessage = "Received: %s"
        val sentMessage = "Sent: %s"
        fun received(message:String){
            println(String.format(receivedMessage, message))
        }
        fun sent(message:String){
            writeToserver(message)
            println(String.format(sentMessage, message))
        }
        fun writeToserver(message:String){
            output.write((message + '\n').toByteArray(Charset.defaultCharset()))
        }
    }
    class Ui{
        val database = mutableMapOf<Int, String>()
        fun ProcessInput(){
            var input=""
            do{
                input = readln()
                if(input.startsWith("set")){
                    val cp = input.split(" ")
                    set(cp[1].toInt(),input.substring(cp.indexOf(cp[2])))
                }
                else if(input.startsWith("get")){
                    val cp = input.split(" ")
                    get(cp[1].toInt())
                }
                else if(input.startsWith("delete")){
                    val cp = input.split(" ")
                    delete(cp[1].toInt())
                }
            }while(input!="exit")
        }
        fun set(index:Int, str:String){
            if(index>100||index<0) {
                println("Error")
                return
            }
            database[index]=str
            println("OK")
        }
        fun get(index:Int){
            if (database.containsKey(index))
                if(database[index]!="")
                    println(database[index])
                else
                    println("ERROR")
            else
                println("ERROR")
        }
        fun delete(index:Int){
            if(index>100||index<0) {
                println("ERROR")
                return
            }
            if (database.containsKey(index))
                database[index]=""
            println("OK")
        }
    }
  learner_created: true
- name: src/jsondatabase/client/Main.kt
  visible: true
  text: |-
    package jsondatabase.client

    import java.io.DataInputStream
    import java.io.DataOutputStream
    import java.io.File
    import java.io.OutputStream
    import java.net.InetAddress
    import java.net.Socket
    import java.nio.charset.Charset
    import java.nio.file.Files
    import java.nio.file.Paths

    fun main(args: Array<String>) {

        val controller = Controller()
        controller.ProcessMainInput()
    }

    class Controller{
        init {
            println("Client started!")
        }
        val address = "127.0.0.1"
        val port = 23456
        val socket = Socket(InetAddress.getByName(address), port)
        val input = DataInputStream(socket.getInputStream())
        val output = DataOutputStream(socket.getOutputStream())
        var ui = ClientUi(this, output)

        fun ProcessMainInput(){
            ui.sent("Give me a record # 12")
            val messageFromClient = input.readLine()
            ui.received(messageFromClient)
        }
    }
    class ClientUi(val controller: Controller, val output: OutputStream){
        val receivedMessage = "Received: %s"
        val sentMessage = "Sent: %s"
        fun received(message:String){
            println(String.format(receivedMessage, message))
        }
        fun sent(message:String){
            writeToserver(message)
            println(String.format(sentMessage, message))
        }
        fun writeToserver(message:String){
            output.write((message + '\n').toByteArray(Charset.defaultCharset()))
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/26261#comment
status: Failed
feedback:
  message: |-
    Error in test #2

    In this test, the program is running for a long time, more than 15 seconds. Most likely, the program has gone into an infinite loop.

    Please find below the output of your program during this failed test.

    ---

    Arguments for MainKt: -t get -i 1

    Client started!
    Sent: get 1
  time: "Mon, 17 Apr 2023 15:12:20 UTC"
record: -1
